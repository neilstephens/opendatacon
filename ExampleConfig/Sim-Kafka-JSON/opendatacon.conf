 
{
	"LogFileSizekB"	: 50000,
	"LogName" :	"ODC_Log.txt",
	"NumLogFiles":	1,
	"LogLevel":	"debug",
	"ConsoleLevel" : "debug",
	
	"Plugins" :
	[
		{
			"Name" : "ConsoleUI-1",
			"Type" : "ConsoleUI",
			"Library" : "ConsoleUI",
			"ConfFilename" : "",
			"ConfOverrides" : { }
		}
	],
	
	"Ports" :
	[
		{
			"Name" : "Sim",
			"Type" : "Sim",
			"ConfFilename" : "",
			"ConfOverrides" : 
			{
				"Binaries" : [{"Index": 0},{"Index": 1},{"Index": 5},{"Index": 6}],
				"Analogs" : [{"Range" : {"Start" : 0, "Stop" : 3}, "StartVal" : 50, "UpdateIntervalms" : 1000, "StdDev" : 2}]
			}
		},
		
		{
			"Name" : "KafkaProducer",
			"Type" : "KafkaProducer",
			"Library" : "KafkaPort",
			"ConfFilename" : "",
			"ConfOverrides" : 
			{
				//Producer is persistent by default
				//"ServerType" : "PERSISTENT",
				//////////////////////////////// Most options are applicable to consumer and producer ports
				"NativeKafkaProperties" :
				{
					//see https://docs.confluent.io/platform/current/installation/configuration/producer-configs.html
					"bootstrap.servers" : "127.0.0.1:9092",
					"client.id" : "odc-producer"
				},
				//Point Translation Map (PTM)
				"PointTranslationMap" :
				{
					"Binary" : [ {"Index": 0},{"Index": 1},{"Index": 5},{"Index": 6}],
					"Analog" : [ {"Range" : {"Start" : 0, "Stop" : 3}} ]
				},
				"TranslationMethod" : "CBOR"			//"CBOR", "Template" (default) or "Lua" (not implemented yet)
				//,"DefaultCBORStructure" : 
				//,"DefaultTemplate" : "[\"TIMESTAMP\",\"EVENTTYPE_RAW\",\"SOURCEPORT\",\"INDEX\",\"QUALITY_RAW\",\"PAYLOAD\"]"
				//{
				//	"EventType": "<EVENTTYPE>",
				//	"NumericEventType": <EVENTTYPE_RAW>,
				//	"Index": <INDEX>,
				//	"Description": "<POINT:Name>",
				//	"Timestamp": <TIMESTAMP>,
				//	"DateTime": "<DATETIME>",
				//	"Quality": "<QUALITY>",
				//	"NumericQuality": <QUALITY_RAW>,
				//	"Payload": <PAYLOAD>,
				//	"SourcePort": "<SOURCEPORT>",
				//	"SenderName": "<SENDERNAME>"
				//}"
				//,"ShareKafkaClient" : true 					//Producer ports can share broker connections
				//,"SharedKafkaClientKey" : "blah" 				//Ports with the same key share a client connection. Bootstrap servers are used as the key if not specified.
				//,"MaxPollIntervalms" : 100					//In absence of events triggering polling, poll at least this often
				//,"DefaultTopic" : "opendatacon"				//Topic that will be used if not specified in the point translation map
				//,"OctetStringFormat" : "Base64"				//"Base64", "Hex", or "Raw" (de)encoding of octet string event data
				//,"DateTimeFormat" : "%Y-%m-%d %H:%M:%S.%e"	//Text (DATETIME) (de)encoding of timestamps
				
				/////////////////////////////// Producer specific options
				//,"DefaultKey" : ""
				//,"PointTraslationSource" : "None"				//"None","SenderName" or "SourcePort". PTM entries can specify a "Source" if multiple sources are feeding the port.
				//,"BlockUnknownPoints" : false					//Whether to only send events that are in the PTM
				//,"OverridesCreateNewPTMEntries" : false		//By default, the PTM in the ConfOverrides *adds* to the PTM entries in the ConfFile, change to true to *replace* entries
			}
		},
		
		{
			"Name" : "KafkaConsumer",
			"Type" : "KafkaConsumer",
			"Library" : "KafkaPort",
			"ConfFilename" : "",
			"ConfOverrides" : 
			{
				//Consumer is on-demand by default. Ie. Only consume if there's something upstream to receive it
				//"ServerType" : "ONDEMAND",
				"NativeKafkaProperties" :
				{
					//see https://docs.confluent.io/platform/current/installation/configuration/consumer-configs.html
					"bootstrap.servers" : "127.0.0.1:9092",
					"client.id" : "odc-consumer",
					
					//offsets are commited for the consumer group.
					//Specify group.id so we can resume from our last offset on disconnect/connect.
					"group.id" : "odc-consumer-group"
				},
				"PointTranslationMap" :
				{
					"Binary" : [ {"Index": 0},{"Index": 1},{"Index": 5},{"Index": 6}],
					"Analog" : [ {"Range" : {"Start" : 0, "Stop" : 3}} ]
				},
				"TranslationMethod" : "CBOR"
				/////////////////////////////// Consumer specific options - see producer above for jointly applicable options
				//,"ConsumerFastForwardOffset" : 0				//Zero means continue from previous offset (native auto.offset.reset applies).
																//Negative means seek backwards from the last offset
																//Positive means seek forward from the first offset
				//,"RegexEscapeTemplates" : true				//The template is coverted to a regex with the placeholders coverted to capture groups
																//Leave this as true to escape other special characters (straight text matching)
																//Set to false to allow your own regex additions - just don't add any capture groups 
			}
		},
		
		{
			"Name" : "JSON",
			"Type" : "JSONClient",
			"Library" : "JSONPort",
			"ConfFilename" : "",
			"ConfOverrides" : 
			{
				"IP" : "127.0.0.1", "Port" : 2598,
				"PrintAllEvents" : true
			}
		}
	],
	
	"Connectors" :
	[
		{
			"Name" : "Connector",
			"ConfFilename" : "",
			"ConfOverrides" : 
			{
				"Connections" :
				[
					{
						"Name" : "Connection1",
						"Port1" : "Sim",
						"Port2" : "KafkaProducer"
					},
					{
						"Name" : "Connection2",
						"Port1" : "KafkaConsumer",
						"Port2" : "JSON"
					}
				]
			}
		}		
	]
}		
		
		
		
